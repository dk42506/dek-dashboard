// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_POSTGRES_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("CLIENT")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  notes         Note[]
  adminSettings AdminSettings?
  notifications Notification[]
  clientNotifications Notification[] @relation("ClientNotifications")
  
  // Client-specific fields
  businessName  String?
  businessType  String?
  website       String?
  location      String?
  phone         String?
  clientSince   DateTime?
  
  // Representative contact information
  repName       String?
  repRole       String?
  repEmail      String?
  repPhone      String?
  
  // Website monitoring
  websiteStatus String?   // 'up', 'down', 'unknown', 'checking'
  lastChecked   DateTime?
  updownToken   String?   // updown.io check token
  
  // Password management
  passwordChanged Boolean? @default(false)
}

model Note {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdminSettings {
  id                        String   @id @default(cuid())
  userId                    String   @unique
  displayName               String?
  businessName              String?
  businessEmail             String?
  businessPhone             String?
  businessAddress           String?
  businessWebsite           String?
  defaultClientType         String?
  emailNotifications        Boolean  @default(true)
  clientUpdateNotifications Boolean  @default(true)
  systemAlerts              Boolean  @default(true)
  websiteMonitoringAlerts   Boolean  @default(true)
  monthlyReportEmails       Boolean  @default(true)
  autoBackup                Boolean  @default(true)
  backupFrequency           String   @default("daily")
  sessionTimeout            Int      @default(24)
  compactMode               Boolean  @default(false)
  theme                     String   @default("light")
  timezone                  String   @default("America/New_York")
  dateFormat                String   @default("MM/dd/yyyy")
  currency                  String   @default("USD")
  freshbooksClientId        String?
  freshbooksClientSecret    String?
  freshbooksAccessToken     String?
  freshbooksRefreshToken    String?
  freshbooksAccountId       String?
  freshbooksAutoSync        Boolean  @default(true)
  freshbooksSyncFrequency   String   @default("daily")
  updownApiKey              String?
  updownAutoSync            Boolean  @default(true)
  updownSyncFrequency       String   @default("hourly")
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // 'new_client', 'website_down', 'website_up'
  title     String
  message   String
  read      Boolean  @default(false)
  userId    String?  // null for system notifications
  clientId  String?  // related client if applicable
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  client User? @relation("ClientNotifications", fields: [clientId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
